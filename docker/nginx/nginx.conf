user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # 로그 포맷 정의
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # 성능 최적화 설정
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 20M;

    # Gzip 압축 설정
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # 업스트림 서버 정의
    upstream simple_llm_backend {
        least_conn;
        server simple-llm-backend:8080 max_fails=3 fail_timeout=30s;
        # 로드 밸런싱을 위해 여러 인스턴스 추가 가능
        # server simple-llm-backend-2:8080 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream vllm_server {
        server vllm:8000 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }

    upstream sglang_server {
        server sglang:30000 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }

    # Rate limiting 설정
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=llm_limit:10m rate=2r/s;

    # HTTP 서버 (HTTPS로 리다이렉트)
    server {
        listen 80;
        server_name localhost;
        
        # HTTP to HTTPS redirect
        location / {
            return 301 https://$server_name$request_uri;
        }

        # 헬스체크는 HTTP로 허용
        location /health {
            proxy_pass http://simple_llm_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # HTTPS 서버
    server {
        listen 443 ssl http2;
        server_name localhost;

        # SSL 설정
        ssl_certificate /etc/nginx/ssl/server.crt;
        ssl_certificate_key /etc/nginx/ssl/server.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:1m;
        ssl_session_timeout 1h;

        # 보안 헤더
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # API 엔드포인트 (Simple LLM Backend)
        location /api/ {
            # Rate limiting 적용
            limit_req zone=api_limit burst=20 nodelay;
            
            proxy_pass http://simple_llm_backend/api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # 타임아웃 설정
            proxy_connect_timeout 10s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # 버퍼링 설정
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            
            # 커넥션 재사용
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        # LLM 추론 엔드포인트에 특별한 Rate Limiting 적용
        location /api/generate {
            limit_req zone=llm_limit burst=5 nodelay;
            
            proxy_pass http://simple_llm_backend/api/generate;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # LLM 추론은 시간이 오래 걸릴 수 있으므로 타임아웃 연장
            proxy_connect_timeout 10s;
            proxy_send_timeout 120s;
            proxy_read_timeout 120s;
            
            # 큰 요청 본문 허용
            client_max_body_size 10M;
        }

        # vLLM 직접 접근 (개발/디버깅용)
        location /vllm/ {
            # 인증된 사용자만 접근 가능하도록 설정 가능
            # auth_basic "vLLM Access";
            # auth_basic_user_file /etc/nginx/.htpasswd;
            
            proxy_pass http://vllm_server/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 긴 타임아웃 (모델 로딩 시간 고려)
            proxy_connect_timeout 30s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
        }

        # SGLang 직접 접근 (개발/디버깅용)
        location /sglang/ {
            proxy_pass http://sglang_server/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 30s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
        }

        # Actuator 엔드포인트 (모니터링용)
        location /actuator/ {
            # 내부 네트워크에서만 접근 허용
            allow 172.20.0.0/16;
            allow 127.0.0.1;
            deny all;
            
            proxy_pass http://simple_llm_backend/actuator/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # 정적 파일 서빙 (문서, 대시보드 등)
        location /docs/ {
            alias /usr/share/nginx/html/docs/;
            try_files $uri $uri/ =404;
            
            # 캐시 설정
            expires 1d;
            add_header Cache-Control "public, immutable";
        }

        # 기본 헬스체크
        location /health {
            proxy_pass http://simple_llm_backend/api/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 빠른 응답을 위한 짧은 타임아웃
            proxy_connect_timeout 3s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
        }

        # 메인 페이지
        location / {
            return 200 '{"message":"Simple LLM Backend API","version":"0.0.1-SNAPSHOT","endpoints":["/api/health","/api/info","/api/generate"]}';
            add_header Content-Type application/json;
        }

        # 404 에러 처리
        error_page 404 /404.json;
        location = /404.json {
            return 404 '{"error":"Not Found","message":"The requested resource was not found"}';
            add_header Content-Type application/json;
        }

        # 50x 에러 처리
        error_page 500 502 503 504 /50x.json;
        location = /50x.json {
            return 500 '{"error":"Internal Server Error","message":"The server encountered an internal error"}';
            add_header Content-Type application/json;
        }
    }

    # 모니터링용 상태 서버 (내부 네트워크만)
    server {
        listen 8081;
        server_name localhost;
        
        # 접근 제한
        allow 172.20.0.0/16;
        allow 127.0.0.1;
        deny all;

        # Nginx 상태
        location /nginx_status {
            stub_status on;
            access_log off;
        }

        # 업스트림 상태
        location /upstream_status {
            return 200 '{"simple_llm_backend":"up","vllm":"up","sglang":"up"}';
            add_header Content-Type application/json;
        }
    }
}